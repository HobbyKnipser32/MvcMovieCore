// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using MvcMoviesCore.Models;
using System;

namespace MvcMoviesCore.Migrations
{
    [DbContext(typeof(MvcMovieCoreContext))]
    internal class MvcMovieCoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MvcMoviesCore.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.Movies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Added");

                    b.Property<bool>("Adult");

                    b.Property<Guid>("GenreId");

                    b.Property<decimal?>("IMDB")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InStock");

                    b.Property<DateTime?>("LastView");

                    b.Property<string>("Name");

                    b.Property<string>("OnWatch");

                    b.Property<string>("Owner");

                    b.Property<decimal?>("Ranking")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RecordCarrierId");

                    b.Property<string>("Remark");

                    b.Property<Guid?>("StorageLocationId");

                    b.Property<bool>("ThreeD");

                    b.Property<DateTime?>("YearOfPublication");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("RecordCarrierId");

                    b.HasIndex("StorageLocationId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.MoviesPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("MoviesId");

                    b.Property<Guid>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("MoviesId");

                    b.HasIndex("PersonId");

                    b.ToTable("MoviesPerson");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Birthday");

                    b.Property<decimal?>("Gewicht")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Größe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name");

                    b.Property<string>("Nationality");

                    b.Property<DateTime?>("Obit");

                    b.Property<Guid>("PersonTypesId");

                    b.Property<Guid>("SexId");

                    b.HasKey("Id");

                    b.HasIndex("PersonTypesId");

                    b.HasIndex("SexId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.PersonTypes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PersonType");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.RecordCarrier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RecordCarrier");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.Sex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.StorageLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("StorageLocation");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.Movies", b =>
                {
                    b.HasOne("MvcMoviesCore.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcMoviesCore.Models.RecordCarrier", "RecordCarrier")
                        .WithMany("Movies")
                        .HasForeignKey("RecordCarrierId");

                    b.HasOne("MvcMoviesCore.Models.StorageLocation", "StorageLocation")
                        .WithMany("Movies")
                        .HasForeignKey("StorageLocationId");
                });

            modelBuilder.Entity("MvcMoviesCore.Models.MoviesPerson", b =>
                {
                    b.HasOne("MvcMoviesCore.Models.Movies", "Movies")
                        .WithMany("MoviesPerson")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcMoviesCore.Models.Person", "Person")
                        .WithMany("MoviesPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MvcMoviesCore.Models.Person", b =>
                {
                    b.HasOne("MvcMoviesCore.Models.PersonTypes", "PersonTypes")
                        .WithMany("Person")
                        .HasForeignKey("PersonTypesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MvcMoviesCore.Models.Sex", "Sex")
                        .WithMany("Person")
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
