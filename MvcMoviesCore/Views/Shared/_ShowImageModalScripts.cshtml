<script>
    function getImageType(imageName) {
        return imageName.split('.').pop().toLowerCase();
    }

    function onMouseEnter(container) {
        if (container.children.length >= 2) {
            const padding = 5;
            const border = 1;
            const offset = 20;

            let nodeSmall = container.children[0];
            let rectSmall = nodeSmall.getBoundingClientRect();
            let nodeLarge = container.children[1];
            let rectLarge = nodeLarge.getBoundingClientRect();
            let viewWidth = document.documentElement.clientWidth;
            let viewHeight = document.documentElement.clientHeight;
            let left = rectSmall.left + rectSmall.width + Number(offset);
            let top = rectSmall.top - Number(offset);
            let nodeLargeWidth = nodeLarge.naturalWidth + Number(padding) + Number(border);
            let nodeLargeHeight = nodeLarge.naturalHeight + Number(padding) + Number(border);
            let maxImageHeight = getMaxHeight($(nodeLarge).css("max-height"));

            // image larger than maxImageHeight
            if (nodeLargeHeight > maxImageHeight) {
                nodeLargeHeight = Number(maxImageHeight) + Number(padding) + Number(border);
                nodeLargeWidth = Number(maxImageHeight * nodeLarge.naturalWidth / nodeLarge.naturalHeight) + Number(padding) + Number(border);
                nodeLarge.height = nodeLargeHeight;
                nodeLarge.width = nodeLargeWidth;
            }

            // Image larger than viewHeight
            if(nodeLarge.height > viewHeight){
                nodeLargeHeight = Number(viewHeight) - Number(padding) - Number(border) - 2 * Number(offset);
                nodeLargeWidth = Number(nodeLargeHeight * nodeLarge.naturalWidth / nodeLarge.naturalHeight) + Number(padding) + Number(border);
                nodeLarge.height = nodeLargeHeight + Number(padding) + Number(border);
                nodeLarge.width = nodeLargeWidth;
            }

            let placeRight = Number(viewWidth) - rectSmall.left - rectSmall.width - Number(offset);
            let placeLeft = rectSmall.left - Number(offset);
            let placeAbove = Number(rectSmall.top) - Number(offset);
            let placeBelow = Number(viewHeight) - Number(rectSmall.top) - Number(rectSmall.height) - Number(offset);

            let showLargeRight = false;
            if (placeRight >= nodeLargeWidth) {
                showLargeRight = true;
                if (placeBelow < nodeLargeHeight) {
                    top = Number(viewHeight) - Number(nodeLargeHeight) - Number(offset);
                }
            }

            // not enough space on the right, show on the left side
            let showLargeLeft = false;
            if (placeLeft >= nodeLargeWidth && !showLargeRight) {
                left = rectSmall.x - Number(offset) - Number(nodeLargeWidth);
                if (placeBelow < nodeLargeHeight) {
                    top = Number(viewHeight) - Number(nodeLargeHeight) - Number(offset);
                }
                showLargeLeft = true;
            }

            // not enough space on the left or right, show below or above
            if (!showLargeRight && !showLargeLeft) {
                // on below is more place
                if (placeBelow >= placeAbove) {
                    top = rectSmall.top + rectSmall.height + Number(offset);
                    if (Number(placeBelow) < Number(nodeLargeHeight)) {
                        nodeLargeHeight = Number(placeBelow) - Number(offset);
                        nodeLargeWidth = Number(nodeLargeHeight * nodeLarge.naturalWidth / nodeLarge.naturalHeight);
                        nodeLarge.height = nodeLargeHeight;
                        nodeLarge.width = nodeLargeWidth;
                    }
                }
                else {
                    top = rectSmall.top - Number(nodeLargeHeight) - Number(offset);
                    if (Number(placeAbove) < Number(nodeLargeHeight)) {
                        nodeLargeHeight = Number(placeAbove) - Number(offset);
                        nodeLargeWidth = Number(nodeLargeHeight * nodeLarge.naturalWidth / nodeLarge.naturalHeight);
                        nodeLarge.height = nodeLargeHeight;
                        nodeLarge.width = nodeLargeWidth;
                        top = Number(offset);
                    }
                }

                let align = Number(rectSmall.left) + (Number(rectSmall.width) / 2);
                // not enough space left, shift at right
                if (align < (Number(nodeLargeWidth / 2))) {
                    left = Number(offset);
                }
                // not enough space right, shift at left
                else if ((Number(viewWidth) - Number(align)) < (Number(nodeLargeWidth / 2))) {
                    left = Number(viewWidth) - Number(nodeLargeWidth) - Number(offset);
                }
                else {
                    left = Number(align) - (Number(nodeLargeWidth) / 2);
                }
            }

            nodeLarge.style.left = left + "px";
            nodeLarge.style.top = top + "px";
            nodeLarge.style.position = "fixed";
            nodeLarge.style.display = "block";
        }
    }

    function onMouseLeave(container) {
        if (container.children.length >= 2) {
            let node = container.children[1];
            node.style.display = "none";
        }
    }

    function getMaxHeight(nodeMaxHeight) {
        if (nodeMaxHeight == "none"){
            return 800;
        }
        else
        {
            return nodeMaxHeight.substring(0, nodeMaxHeight.indexOf("px"));
        }
    }

</script>