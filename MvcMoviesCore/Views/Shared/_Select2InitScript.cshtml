<script>
    function InitSelect2() {
        $('.select2-dropdown').not('#onBehalfUsers,[multiple]').select2({
            width: '100%',
            placeholder: $('#_pleaseChoose').val(),
            allowClear: true,
            escapeMarkup: function (markup) {
                return markup;
            },
            "language": {
                "noResults": function () {
                    return $('#_NoResultsFound').val();
                }
            },
            templateResult: function (data, container) {
                var description = $(data.element).data("description");
                if (description) {
                    return '<div><strong>' + data.text + '</strong></div>' + '<div><small>' + description + '</small></div>';
                }
                else
                    return data.text;
            },
            matcher: matchCustom


        });

        $('.select2-dropdown[multiple]').not('#onBehalfUsers').select2({
            closeOnSelect: false,
            width: '100%',
            placeholder: $('#_pleaseChoose').val(),
            allowClear: true,
            escapeMarkup: function (markup) {
                return markup;
            },
            "language": {
                "noResults": function () {
                    return $('#_NoResultsFound').val();
                }
            },
            templateResult: function (data, container) {
                var description = $(data.element).data("description");
                if (description) {
                    return '<div><strong>' + data.text + '</strong></div>' + '<div><small>' + description + '</small></div>';
                }
                else
                    return data.text;
            },
            dropdownAdapter: $.fn.select2.amd.require('select2/selectAllAdapter'),
            matcher: matchCustom


        });

    }


    $.fn.select2.amd.define('select2/selectAllAdapter', [
        'select2/utils',
        'select2/dropdown',
        'select2/dropdown/attachBody',
        "select2/dropdown/closeOnSelect",
        "select2/dropdown/minimumResultsForSearch",
        "select2/dropdown/search"
    ],
        function (Utils, Dropdown, AttachBody, CloseOnSelect, MinimumResultsForSearch, Search) {

            function SelectAll() { }
            SelectAll.prototype.render = function (decorated) {
                var self = this,
                    $rendered = decorated.call(this),
                    $selectAll = $(
                        '<button class="btn btn-rose btn-sm" type="button" style="margin-left:6px;"><i class="material-icons">check_circle_outline</i></button>'
                    ),
                    $unselectAll = $(
                        '<button class="btn btn-rose btn-sm" type="button" style="margin-left:6px;"><i class="material-icons">highlight_off</i></button>'
                    ),
                    $btnContainer = $('<div style="margin-top:3px;">').append($selectAll).append($unselectAll);
                if (!this.$element.prop("multiple")) {
                    // this isn't a multi-select -> don't add the buttons!
                    return $rendered;
                }
                $rendered.find('.select2-dropdown').prepend($btnContainer);
                $selectAll.on('click', function (e) {

                    var $results = $rendered.find('.select2-results__option[aria-selected="false"]');

                    var selected = [];
                    $results.each(function (i, e) {

                        var justId = e.id.replace(/^([A-Za-z0-9]*-*[A-Za-z0-9]*-*[A-Za-z0-9]*-*[A-Za-z0-9]*-)/, '');
                        if (justId)
                            selected.push(justId);
                        //selected.push(e.id.match("(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}")[0]);
                    });

                    self.$element.val(selected);
                    self.$element.trigger('change');

                    self.trigger('close');
                });
                $unselectAll.on('click', function (e) {
                    self.$element.val(null);
                    self.$element.trigger('change');
                    self.trigger('close');
                });
                return $rendered;
            };

            return Utils.Decorate(
                Utils.Decorate(
                    Dropdown,
                    AttachBody,
                    CloseOnSelect,
                    MinimumResultsForSearch,
                    Search
                ),
                SelectAll
            );

        });

    function matchCustom(params, data) {
        // If there are no search terms, return all of the data
        if ($.trim(params.term) === '') {
            return data;
        }

        // Do not display the item if there is no 'text' property
        if (typeof data.text === 'undefined') {
            return null;
        }

        // `params.term` should be the term that is used for searching
        // `data.text` is the text that is displayed for the data object
        var description = $(data.element).data("description");

        if (
            (params.term.toUpperCase().indexOf('*') > -1 &&
                hasWildcardSearchBy(params.term.toUpperCase(), data.text.toUpperCase())) ||
            (params.term.toUpperCase().indexOf('*') <= -1 &&
                data.text.toUpperCase().indexOf(params.term.toUpperCase()) > -1)
        ) {

            var modifiedData = $.extend({}, data, true);

            return modifiedData;
        }

        if (description) {
            description = description.toString();
            if (
                (params.term.toUpperCase().indexOf('*') > -1 &&
                    hasWildcardSearchBy(params.term.toUpperCase(), description.toUpperCase())) ||
                (params.term.toUpperCase().indexOf('*') <= -1 &&
                    description.toUpperCase().indexOf(params.term.toUpperCase()) > -1)
            ) {

                var modifiedData = $.extend({}, data, true);

                return modifiedData;
            }
        }


        // Return `null` if the term should not be displayed
        return null;
    }

    function hasWildcardSearchBy(searchStr, text) {
        var text = trimStr(text);
        if (text && text.trim() != "") {

            var result = matchRuleExpl(text, searchStr);

            return result;
        }
        else
            return false;
    }

    function trimStr(str) {
        if (!str) return str;
        return str.replace(/^\s+|\s+$/g, '');
    }


    //Explanation code
    function matchRuleExpl(str, rule) {
        // for this solution to work on any string, no matter what characters it has
        var escapeRegex = (str) => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");

        // "."  => Find a single character, except newline or line terminator
        // ".*" => Matches any string that contains zero or more characters
        rule = rule.split("*").map(escapeRegex).join(".*");

        // "^"  => Matches any string with the following at the beginning of it
        // "$"  => Matches any string with that in front at the end of it
        rule = "^" + rule + "$"

        //Create a regular expression object for matching string
        var regex = new RegExp(rule);

        //Returns true if it finds a match, otherwise it returns false
        return regex.test(str);
    }

    $(document).ready(InitSelect2);

</script>