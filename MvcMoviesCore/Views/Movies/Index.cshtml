@model IEnumerable<MvcMoviesCore.Models.Movies>

@{
    ViewData["Title"] = "Movies";
    var genres = ViewData["Genre"] as IEnumerable<SelectListItem>;
    var recordCarriers = ViewData["RecordCarrier"] as IEnumerable<SelectListItem>;
    var markers = ViewData["Markers"] as IEnumerable<SelectListItem>;
    var minYearOfPublication = ViewData["MinYearOfPublication"];
    var maxYearOfPublication = ViewData["MaxYearOfPublication"];
    var minRunTime = ViewData["MinRunTime"];
    var maxRunTime = ViewData["MaxRunTime"];
}
<div class="container-fluid">
    <div class="row">
        <div class="col-md-1" style="display:table-cell; vertical-align:middle">
            <h2>Movies</h2>
        </div>
        <div class="col-md-1" style="position:relative">
            <div style="display:table-cell; height:100%">
                <p>
                    <a title="Film hinzufügen" asp-action="Create" style="vertical-align:bottom">
                        <i class="fa-regular fa-square-plus fa-beat fa-2xl" style="color: #63E6BE;  --fa-animation-duration: 2s;"></i>
                    </a>
                </p>
            </div>
        </div>
    </div>
    <div class="card shadow p-3 mb-5 bg-white rounded">
        <h4 class="card-title" style="color:blue; background-image: linear-gradient(to right, aliceblue, white); "><b>Filter</b></h4>
        <div class="row">
            <div class="col-md-12">
                <div class="row">
                    <div class="form-group col-md-2">
                        <label class="col-form-label">Film:</label>
                        <input id="title" class="form-control" type="text" />
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Erscheinungsjahr:</label>
                        <input id="yearOfPuplication" class="form-control" type="number" min="@minYearOfPublication" max="@maxYearOfPublication" />
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Laufzeit von:</label>
                        <input id="runTimeFrom" class="form-control" type="number" min="@minRunTime" max="@maxRunTime" />
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Laufzeit bis:</label>
                        <input id="runTimeTo" class="form-control" type="number" min="@minRunTime" max="@maxRunTime" />
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Bewertung:</label>
                        <input id="ranking" class="form-control" type="number" min="1" max="10" />
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Marker</label>
                        @Html.DropDownList("marker", markers, new { @class = "form-select" })
                    </div>
                    <div class="form-group col-md-2">
                        <label class="col-form-label">Genre</label>
                        @Html.DropDownList("genre", genres, new { @class = "form-select" })
                    </div>
                    <div class="form-group col-md-1">
                        <label class="col-form-label">Datenträger:</label>
                        @Html.DropDownList("recordCarrier", recordCarriers, new { @class = "form-select" })
                    </div>
                    <div class="form-group col-md-1">
                        <div class="form-group">
                            <button style="vertical-align:central" class="btn btn-rose btn-fab" type="button" id="submitFilter" title="Daten filtern">
                                <i class="fas fa-search fa-shake" style="color: #74C0FC; --fa-animation-duration: 2s;"></i>
                            </button>
                        </div>
                    </div>
                    <div class="form-group col-md-1">
                        <div class="form-group">
                            <button style="vertical-align:central" class="btn btn-rose btn-fab" type="button" id="deleteFilter" title="Filter löschen">
                                <i class="fa-regular fa-trash-can fa-shake" style="color: #74C0FC; --fa-animation-duration: 2s;"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow p-3 mb-5 bg-white rounded">
        <table class="table table-striped cell-border table-hover compact" cellspacing="0" style="width: 100%; word-wrap:break-word; table-layout: auto;" id="movieIndex">
            <thead>
                <tr>
                    <th width="20%">Film</th>                   @* #00 *@
                    <th>Erscheinungsjahr</th>                   @* #01 *@
                    <th>Vorhanden</th>                          @* #02 *@
                    <th>Laufzeit</th>                           @* #03 *@
                    <th>Bewrtg.</th>                            @* #04 *@
                    <th>Marker</th>                             @* #05 *@
                    <th width="200px">zuletzt gesehen</th>      @* #06 *@
                    <th>Genre</th>                              @* #07 *@
                    <th>Speichermedium</th>                     @* #08 *@
                    <th>Speicherort</th>                        @* #09 *@
                    <th width="175px">Filegröße [kb]</th>       @* #10 *@
                    <th width="3%">&nbsp;</th>                  @* #11 *@
                    <th width="3%">&nbsp;</th>                  @* #12 *@
                </tr>
            </thead>
        </table>
    </div>
</div>

@section Scripts
{
    <partial name="_DataTableScripts" />

    <script>
        $(document).ready(function () {
            let table = $('#movieIndex').DataTable({
                retrieve: true,
                ajax: {
                    url: appRootPath + '/api/MoviesApi/GetMovies',
                    dataSrc: ''
                },
                columns: [
                    {
                        data: 'Name',
                        render: function (data, type, full) {
                            if (data && type === 'display') {
                                var url = '@Url.Action("Details", "Movies")' + '/' + full.Id;
                                return '<a href="' + url + '" title="Details ansehen">' + full.Name; /*  + '< /a>'; */
                            }
                            return '';
                        },
                        type: 'html',
                        className: 'select-filter'
                        // searchable: true
                    },
                    {
                        data: 'YearOfPublication',
                        render: function (data, type) {
                            if (data && type === 'display') {
                                let yearOfPublication = new Date(data);
                                return yearOfPublication.getUTCFullYear();
                            }
                            return '';
                        },
                        type: 'num',
                        className: 'dt-body-right'
                    },
                    {
                        data: 'InStock',
                        render: function (data, type, full) {
                            if (data && type === 'display' && full.InStock) {
                                return '<i class="fa-solid fa-check" style="color: #74C0FC;"></i>';
                            }
                            return '<i class="fa-solid fa-xmark" style="color: #ff0000"></i>';
                        },
                        type: 'html',
                        className: 'dt-body-center'
                    },
                    { data: 'RunTime', render: ['number', '.', ',', 1], className: 'dt-body-right', type: 'num' },
                    { data: 'Ranking', type: 'num', className: 'dt-body-center' },
                    { data: 'OnWatch', className: 'dt-body-center' },
                    {
                        data: 'LastView',
                        render: function (data, type) {
                            if (type === 'sort'){
                                return data
                            }
                            return data ? moment(data).format('L') : "";
                        },
                        type: 'date',
                        className: 'dt-body-center'
                    },
                    { data: 'Genre.Name' },
                    { data: 'RecordCarrier.Name' },
                    { data: 'StorageLocation.Name' },
                    { data: 'FileSizeInKB', render: ['number', '.', ',', 0], className: 'dt-body-right', type: 'num' },
                    {
                        data: 'Id',
                        orderable: false,
                        searchable: false,
                        render: function (data, type) {
                            if (data && type === 'display') {
                                var url = '@Url.Action("Edit", "Movies")' + '/' + data;
                                return '<a href = "' + url + '" titel="Details zeigen">' +
                                    '<i class="fa-solid fa-pen fa-bounce" style="color: #74C0FC;  --fa-animation-duration: 2s;"></i>';
                            }
                            return '';
                        },
                        type: 'html',
                        className: 'dt-body-center'
                    },
                    {
                        data: 'Id',
                        orderable: false,
                        searchable: false,
                        render: function (data, type, full) {
                            if (data && type === 'display') {
                                var id = "'" + data + "'";
                                var movie = "'" + full.Name + "'";
                                return '<button name="id" style="background-color: transparent; color: red; border: hidden" onClick="deleteMovie(' + id + ',' + movie + ')" title="Film löschen">' +
                                    '<i class="fa-regular fa-trash-can fa-shake" style="color: #ff0000; --fa-animation-duration: 2s;"></i>';
                            }
                            return '';
                        },
                        type: 'html',
                        className: 'dt-body-center'
                    },
                ],
                // ordering: true,
                // searchable: true,
                // bSearchable: true,
                // createdRow: function (row, data, dataIndex) {
                //     if (data['adult'] === false) {
                //         $(row).css("background-color", "green");
                //     }
                // },
                fixedHeader: {
                    header: true,
                    footer: false
                },
                // searchHighlight: true,
            });

            table.columns('.select-filter').every(function () {
                var that = this;

                // Create the select list and search operation
                var select = $('<select />')
                    .appendTo(this.footer())
                    .on('change', function () {
                        that.search($(this).val(), { exact: true }).draw();
                    });

                // Get the search data for the first column and add to the select list
                this.cache('search')
                    .sort()
                    .unique()
                    .each(function (d) {
                        select.append($('<option value="' + d + '">' + d + '</option>'));
                    });
            });

            $("#movieIndex tfoot th").each( function ( i ) {
                var select = $('<select><option value=""></option></select>')
                    .appendTo( $(this).empty() )
                    .on( 'change', function () {
                        table.column( i )
                            .search( $(this).val() )
                            .draw();
                    });
                table.column( i ).data().unique().sort().each( function ( d, j ) {
                    select.append( '<option value="'+d+'">'+d+'</option>' )
                });
            });

            $('#submitFilter').click(function () {
                executeSearch();
            });

            $('#deleteFilter').click(function(){
                $('#title').val(null);
                $('#yearOfPuplication').val(null);
                $('#runTimeFrom').val(null);
                $('#runTimeTo').val(null);
                $('#genre').val(null);
                $('#recordCarrier').val(null);
                $('#ranking').val(null);
                $('#marker').val(null);
                table.ajax.reload();
            });
        })

        function executeSearch(){
            let titleValue = $('#title').val();
            let yearOfPuplicationValue = $('#yearOfPuplication').val();
            let runTimeFromValue = $('#runTimeFrom').val();
            let runTimeToValue = $('#runTimeTo').val();
            let genreValue = $('#genre').val();
            let recordCarrierValue = $('#recordCarrier').val();
            let ranking = $('#ranking').val();
            let marker = $('#marker').val();
            if (titleValue || yearOfPuplicationValue || runTimeFromValue || runTimeToValue || genreValue || recordCarrierValue || ranking || marker ){
                let filter = {
                    "Title": titleValue,
                    "YearOfPuplication": yearOfPuplicationValue,
                    "RunTimeFrom": runTimeFromValue,
                    "RunTimeTo": runTimeToValue,
                    "Genre": genreValue,
                    "RecordCarrier": recordCarrierValue,
                    "Ranking" : ranking,
                    "Marker": marker
                };
                var url = appRootPath + '/api/MoviesApi/SetFilter';
                $.post(url, filter, function (content) {
                    let movieTable = $('#movieIndex').DataTable();
                    movieTable.clear().draw();
                    movieTable.rows.add(JSON.parse(content));
                    movieTable.draw(false);
                })
                .fail(function (response) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Daten konnten nicht gefiltert werden!',
                        footer: response.responseText
                    })
                });
            }
        }

        function deleteMovie(id, movie) {
            Swal.fire({
                // text: 'Film löschen?',
                html: 'Film: <b>' + movie + '</b> löschen?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Ja',
                cancelButtonText: 'Nein'
            }).then(function (result) {
                if (result.value) {
                    var url = appRootPath + '/api/MoviesApi/DeleteMovie/' + id;
                    $.ajax({
                        url: url,
                        type: 'POST',
                        async: false,
                        statusCode: {
                            404: function () {
                                alert("function not found");
                            }
                        },
                        success: function () {
                            $('#movieIndex').DataTable().ajax.reload();
                            executeSearch();
                            Swal.fire({
                                icon: 'success',
                                text: 'Film wurde gelöscht.',
                                showConfirmButton: false,
                                timer: 2000
                            })
                        },
                        error: function (response) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Film konnte nicht gelöscht werden!',
                                footer: response.responseText
                            })
                        }
                    })
                };
            });
        };
    </script>
    }
