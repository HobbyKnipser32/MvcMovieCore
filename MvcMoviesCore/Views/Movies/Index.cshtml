@model IEnumerable<MvcMoviesCore.Models.Movies>

@{
    ViewData["Title"] = "Movies";
}

<h2>Movies</h2>
<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table table-striped cell-border table-hover compact" cellspacing="0" style="width: 100%; word-wrap:break-word; table-layout: auto;" id="movieIndex">
    <thead>
        <tr>
            <th>
                Film
            </th>
            <th>
                Erscheinungsjahr
            </th>
            <th>
                Vorhanden
            </th>
            <th>
                Laufzeit
            </th>
            <th>
                On View
            </th>
            <th width="240px">
                zuletzt gesehen
            </th>
            <th>
                Genre
            </th>
            <th>
                Speichermedium
            </th>
            <th>
                Speicherort
            </th>
            <th>
                Filegröße [kb]
            </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
</table>

@section Scripts
{
    <partial name="_DataTableScripts" />

    <script>
        $(document).ready(function () {
            $('#movieIndex').DataTable({
                ajax: {
                    url: appRootPath + '/api/MoviesApi/GetMovies',
                    dataSrc: ''
                },
                columns: [
                    {
                        data: 'Name',
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                var url = '@Url.Action("Details", "Movies")' + '/' + full.Id;
                                return '<a href="' + url + '" title="Details ansehen">' + full.Name; /*  + '< /a>'; */
                                // return full.Name;
                            }
                            return '';
                        },
                        searchable: true,
                    },
                    {
                        data: 'YearOfPublication',
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                let yearOfPublication = new Date(data);
                                return yearOfPublication.getUTCFullYear();
                            }
                            return '';
                        }
                    },
                    {
                        data: 'InStock',
                        render: function (data, type, full, meta) {
                            if (data && type === 'display' && full.InStock) {
                                return '<i class="fa-solid fa-check" style="color: #74C0FC;"></i>';
                            }
                            return '<i class="fa-solid fa-xmark" style="color: #ff0000"></i>';
                        }
                    },
                    {
                        data: 'RunTime',
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                let runTime = full.RunTime;
                                return full.RunTime.toString().replace(".", ",");
                            }
                            return '';
                        }
                    },
                    { data: 'OnWatch' },
                    {
                        data: 'LastView',
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                let lastView = new Date(data);
                                return lastView.getUTCDay().toString().padStart(2, "0") + "." +
                                    (lastView.getUTCMonth() + 1).toString().padStart(2, "0") + "." +
                                    lastView.getUTCFullYear().toString().padStart(2, "0");
                            }
                            return '';
                        }
                    },
                    { data: 'Genre.Name' },
                    { data: 'RecordCarrier.Name' },
                    { data: 'StorageLocation.Name' },
                    {
                        data: 'FileSizeInKB',
                        render: ['number', '.', ',', 0],
                        type: 'num'
                    },
                    {
                        data: 'Id',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                var url = '@Url.Action("Details", "Movies")' + '/' + data;
                                return '<a href = "' + url + '" titel="Details zeigen">' +
                                    '<i class="fa-solid fa-pen fa-bounce" style="color: #74C0FC;  --fa-animation-duration: 2s;"></i>';
                            }
                            return '';
                        },
                    },
                    {
                        data: 'Id',
                        orderable: false,
                        render: function (data, type, full, meta) {
                            if (data && type === 'display') {
                                var id = "'" + data + "'";
                                return '<button name="id" style="background-color: transparent; color: red; border: hidden" onClick="deleteMovie(' + id + ')" title="Film löschen">' +
                                    '<i class="fa-regular fa-trash-can fa-shake" style="color: #ff0000; --fa-animation-duration: 2s;"></i>';
                            }
                            return '';
                        },
                    },
                ],
                ordering: true,
                createdRow: function (row, data, dataIndex) {
                    if (data.Adult == false) {
                        $(row).css("background-color", "green");
                    }
                },
                fixedHeader: {
                    header: true,
                    footer: false
                },
                columnDefs: [{ width: 400, targets: 9 }],
                searchHighlight: true,
            });
        })

        function deleteMovie(id) {
            Swal.fire({
                text: 'Film löschen?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Ja',
                cancelButtonText: 'Nein'
            }).then(function (result) {
                if (result.value) {
                    var url = appRootPath + '/api/MoviesApi/DeleteMovie/' + id;
                    $.ajax({
                        url: url,
                        type: 'POST',
                        async: false,
                        statusCode: {
                            404: function () {
                                alert("function not found");
                            }
                        },
                        success: function () {
                            $('#movieIndex').DataTable().ajax.reload();
                            Swal.fire({
                                icon: 'success',
                                text: 'Film wurde gelöscht.',
                                showConfirmButton: false,
                                timer: 2000
                            })
                        },
                        error: function (response) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'Film konnte nicht gelöscht werden!',
                                footer: response.responseText
                            })
                        }
                    })
                };
            });
        };
    </script>
}